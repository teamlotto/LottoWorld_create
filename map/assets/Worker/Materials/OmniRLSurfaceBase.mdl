/***************************************************************************************************
 * Copyright 2020 NVIDIA Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/
 
// Implementation of OmniSurfaceBase material

// 3.5.0 modified from NVIDIA's OmniSurfaceBase
//      * specular brdf normal_reflectivity: 0.08 instead of     
//          float r = (ior - 1.0f) / (ior + 1.0f);
//          float nr = r * r;
//      * replace state::normal (no normal map result) by the_normal(geometry_normal)

mdl 1.6;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::limits::*;
import ::math::*;
import ::state::*;
import ::tex::*;

import OmniShared::*;

export material OmniSurfaceBaseRL(

    //Diffuse reflection
    //
    float diffuse_reflection_weight = float(0.8) [[ 
        anno::display_name("Weight"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],
    
    color diffuse_reflection_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Base")
    ]],
    
    //Metalness
    //
    float metalness = float(0.0) [[ 
        anno::display_name("Metalness"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    //Specular reflection
    //
    float specular_reflection_weight = float(1.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float specular_reflection_roughness = float(0.2) [[ 
        anno::display_name("Roughness"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    color specular_reflection_color = color(1.0) [[
        anno::display_name("Specular Color"),
        anno::in_group("Specular")
    ]],

    uniform OmniShared::ior_presets specular_reflection_ior_preset = 
        OmniShared::ior_custom [[
        anno::display_name("IOR Preset"),
        anno::in_group("Specular")
    ]],
    
    uniform float specular_reflection_ior = float(1.5) [[ 
        anno::display_name("IOR"),    
        anno::in_group("Specular"),
        anno::soft_range(1.0f, 5.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    //Subsurface
    //
    float subsurface_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Subsurface"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform OmniShared::scattering_colors_presets subsurface_scattering_colors_preset = 
        OmniShared::scattering_colors_custom [[
        anno::display_name("Scattering Presets"),
        anno::in_group("Subsurface")
    ]],

    color subsurface_transmission_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Subsurface")
    ]],

    color subsurface_scattering_color = color(1.0) [[
        anno::display_name("Radius (mfp)"),
        anno::in_group("Subsurface")
    ]],

    float subsurface_scale = float(1.0) [[
        anno::display_name("Scale"),
        anno::in_group("Subsurface"),
        anno::hard_range(limits::FLOAT_MIN, limits::FLOAT_MAX)
    ]],

    float subsurface_anisotropy = float(0.0) [[ 
        anno::display_name("Anisotropy"),
        anno::in_group("Subsurface"),
        anno::hard_range(-1.0f, 1.0f)
    ]],

    uniform OmniShared::subsurface_scattering_type rtx_mdl_subsurface_type__ = 
        OmniShared::random_walk [[
        anno::display_name("Subsurface Type"),
        anno::in_group("Subsurface"),
        anno::hidden()
    ]],

    //Emission
    //
    float emission_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Emission"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform OmniShared::emission_mode emission_mode = OmniShared::emission_lx
    [[
        anno::display_name("Emission Mode"),
        anno::in_group("Emission")
    ]],
    
    float emission_intensity = float(1.0) [[
        anno::display_name("Intensity"),
        anno::in_group("Emission"),
        anno::soft_range(0.0f, 1000.0f)
    ]],

    color emission_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Emission")
    ]],

    uniform bool emission_use_temperature = false [[ 
        anno::display_name("Use Temperature"),
        anno::in_group("Emission")
    ]],

    float emission_temperature = float(6500.0) [[
        anno::display_name("Temperature"),
        anno::in_group("Emission"),
        anno::soft_range(0.0f, 10000.0f)
    ]],

    //Geometry
    //
    uniform bool thin_walled = false [[ 
        anno::display_name("Thin Walled"),
        anno::description("Thin surface with no interior."),
        anno::in_group("Geometry")
    ]],

	uniform bool enable_opacity = true
	[[
		anno::display_name("Enable Opacity"),
		anno::description("Enables the use of cutout opacity"),
		anno::in_group("Geometry")
	]],

    float geometry_opacity = float(1.0) [[
        anno::display_name("Opacity"),
        anno::in_group("Geometry"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float3 geometry_normal = state::normal() [[
        anno::display_name("Geometry Normal"),
        anno::in_group("Geometry")
    ]],

    float3 geometry_displacement = float3(0.0) [[
        anno::display_name("Displacement"),
        anno::in_group("Geometry")
    ]]
)
[[  
    anno::display_name("OmniSurfaceBaseRL"),
    anno::description("Modified from NVIDIA's OmnisurfaceBase"),
    anno::author("NVIDIA - Reallusion"),
    anno::version(3, 5, 0, ""),
    anno::modified(2020, 3, 12, "")
    
]] = let {

	float final_roughness = math::saturate(specular_reflection_roughness);
   	color final_base_color = diffuse_reflection_color;
    float final_metallic = math::saturate(metalness);
    float final_specular = math::saturate(specular_reflection_weight);
    // - compute final roughness by squaring the "roughness" parameter
    float alpha = final_roughness * final_roughness;
    // reduce the reflectivity at grazing angles to avoid "dark edges" for high roughness due to the layering
    float grazing_refl = math::max((1.0 - final_roughness), 0.0);

	float3 the_normal = geometry_normal;


    //Specular reflection - Dielectric microfacet BRDF
    float specular_reflection_roughness_2 =
        specular_reflection_roughness * specular_reflection_roughness;
    float specular_reflection_roughness_coefficient = specular_reflection_roughness_2;
	float2 specular_reflection_roughness_anisotropy =  float2(specular_reflection_roughness_coefficient);
	
	float specular_reflection_roughness_u = specular_reflection_roughness_anisotropy.x; 
    float specular_reflection_roughness_v = specular_reflection_roughness_anisotropy.y;
	
	float3 specular_reflection_tangent_u = state::texture_tangent_u(0);
	
    float specular_reflection_ior_value = OmniShared::ior_preset_to_value(
        specular_reflection_ior_preset, 
        specular_reflection_ior);

    OmniShared::fresnel_reflectivity specular_reflection_fresnel_reflectivity = 
        OmniShared::approximate_fresnel(
            specular_reflection_ior_value, 
            specular_reflection_roughness_2);

    bsdf specular_reflection_brdf = df::microfacet_ggx_smith_bsdf(
        roughness_u: specular_reflection_roughness_u,
        roughness_v: specular_reflection_roughness_v,
        tint: specular_reflection_color,
        multiscatter_tint: color(1.0),
        tangent_u: specular_reflection_tangent_u,
        mode: df::scatter_reflect);

    //Metal - Conductor microfacet BRDF
    float metal_roughness_u = specular_reflection_roughness_u;
    float metal_roughness_v = specular_reflection_roughness_v;
    float3 metal_tangent_u  = specular_reflection_tangent_u;

    bsdf metal_base_brdf = df::microfacet_ggx_smith_bsdf(
        roughness_u: metal_roughness_u,
        roughness_v: metal_roughness_v,
        tint: color(1.0),
        multiscatter_tint: color(0.0),
        tangent_u: metal_tangent_u,
        mode: df::scatter_reflect);

    color metal_base_color = diffuse_reflection_color * diffuse_reflection_weight;
    color metal_edge_color = specular_reflection_color * specular_reflection_weight;
    OmniShared::metal_complex_ior metal_ior = 
        OmniShared::compute_artistic_to_conductor_fresnel(
            metal_base_color, 
            metal_edge_color);

    bsdf metal_brdf = df::custom_curve_layer(
        weight: 1.0f,
        normal: state::normal(),
        normal_reflectivity: 0.0f,
        grazing_reflectivity: 1.0f,
        exponent: 3.0f,
        base: df::fresnel_factor(
            ior: metal_ior.n,
            extinction_coefficient: metal_ior.k,
            base: metal_base_brdf
        ),
        layer: metal_base_brdf
    );

    //Diffuse reflection - Diffuse microfacet BRDF 
	 bsdf diffuse_reflection_bsdf = df::diffuse_reflection_bsdf(
	 	tint: diffuse_reflection_color);
	 	//,roughness: diffuse_reflection_roughness);
	
    //Subsurface preset
    OmniShared::scattering_colors scattering_colors =
        OmniShared::scattering_colors_preset_to_value(
            subsurface_scattering_colors_preset,
            subsurface_transmission_color,
            subsurface_scattering_color);

    //Diffuse transmission - Diffuse microfacet BTDF
    bsdf diffuse_transmission_btdf = df::diffuse_transmission_bsdf(
        tint: scattering_colors.scattering_transmission_color);

    //Subsurface
    //Please note this is just to keep rtx_mdl_subsurface_type__ safe from optimization.
    color diffuse_transmission_color = 
        (rtx_mdl_subsurface_type__ == OmniShared::random_walk || 
        rtx_mdl_subsurface_type__ == OmniShared::random_walk_v2 ||
        rtx_mdl_subsurface_type__ == OmniShared::fast_sss || 
        rtx_mdl_subsurface_type__ == OmniShared::procedural_vol) ?
        color(1.0) : color(0.0);

    bsdf subsurface_btdf = df::diffuse_transmission_bsdf(
        tint: diffuse_transmission_color);

    OmniShared::volume_coefficients subsurface_vdf_coefficients = 
        OmniShared::compute_subsurface_volume_coefficients(
            scattering_colors.scattering_transmission_color,
            scattering_colors.scattering_scattering_color,
            subsurface_anisotropy,
            ::state::meters_per_scene_unit() * subsurface_scale);

    //Emission - Diffuse emission
    uniform float emission_unit_intensity = 
        (emission_mode == OmniShared::emission_lx) ? 
            math::PI * 1000.0f: 
            1.0f;

    color emission_final_color = 
        emission_use_temperature ? 
            math::blackbody(emission_temperature): 
            emission_color;

    color emission_final_intensity = 
        emission_weight * emission_intensity * emission_unit_intensity * 
        emission_final_color;

    material_emission emission = material_emission(
        emission: df::diffuse_edf(),
        intensity: emission_final_intensity,
        mode: intensity_radiant_exitance);

    //Layering
    //
    //Subsurface | Diffuse transmission
    bsdf diffuse_transmission_btdf_mix = thin_walled ?
        diffuse_transmission_btdf :
        subsurface_btdf;

    //Diffuse transmission | Diffuse reflection
    bsdf diffuse_reflection_bsdf_mix = df::weighted_layer(
        weight: subsurface_weight,
        normal: the_normal, //state::normal(),
        base: diffuse_reflection_bsdf,
        layer: diffuse_transmission_btdf_mix
    );

    //Diffuse reflection | Specular reflection
    bsdf specular_reflection_brdf_mix = df::custom_curve_layer( 
        weight: specular_reflection_weight,
        normal_reflectivity: specular_reflection_fresnel_reflectivity.nr,
        grazing_reflectivity: specular_reflection_fresnel_reflectivity.gr,
        exponent: math::PI * 2.0f,
        base: diffuse_reflection_bsdf_mix,
        layer: specular_reflection_brdf,
        normal: the_normal //state::normal()
    );

    //Specular reflection | Metal
    bsdf metal_brdf_mix = df::weighted_layer(
        weight: metalness,
        normal: state::normal(),
        base: specular_reflection_brdf_mix,
        layer: metal_brdf
    );

    //Metal | Coat
    bsdf coat_brdf_mix = metal_brdf_mix;

    //Surface
    material_surface surface = material_surface(
        scattering: coat_brdf_mix,
        emission: emission
    );
    
    //Back Surface
    material_surface back_surface = material_surface(
        scattering: bsdf(), 
        emission: material_emission(
            emission: edf(), 
            intensity: color(0.0), 
            mode: intensity_radiant_exitance
        )
    );

    //Volume
    vdf volume_vdf_mix = df::anisotropic_vdf(
        directional_bias: thin_walled ? 0.0f : subsurface_anisotropy
    );

    color volume_scattering_coefficient_mix = 
        subsurface_weight == 0.0f ?
            color() :
            subsurface_vdf_coefficients.scattering * subsurface_weight;

    color volume_absorption_coefficient_mix = 
        subsurface_weight == 0.0f ?
            color() :
            subsurface_vdf_coefficients.absorption * subsurface_weight;

    material_volume volume = 
        material_volume(
            scattering: volume_vdf_mix,
            scattering_coefficient: thin_walled ? color(0.0) : volume_scattering_coefficient_mix,
            absorption_coefficient: thin_walled ? color(0.0) : volume_absorption_coefficient_mix
        );

    //Geometry
    material_geometry geometry = material_geometry(
        displacement: geometry_displacement,
        cutout_opacity: enable_opacity ? geometry_opacity : 1.0,
        normal: geometry_normal
    );

} in material(
    thin_walled: thin_walled,
    ior: color(1.0f),
    surface: surface,
    backface: back_surface,
    volume: volume,
    geometry: geometry
);