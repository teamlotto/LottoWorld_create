/***************************************************************************************************
 * Copyright 2020 NVIDIA Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/

// Wrapper for OmniSurfaceBase material

mdl 1.6;

import ::anno::*;
import ::base::*;
import ::limits::*;
import ::state::*;
import ::tex::*;

import OmniSurfaceBase::*;
import OmniShared::*;
import OmniImage::*;

export material OmniRLEyeOcclusion(

    //Diffuse reflection
    //
    float diffuse_reflection_weight = float(1) [[ 
        anno::display_name("Weight"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d diffuse_reflection_weight_image = texture_2d() [[ 
        anno::display_name("Weight Image"),
        anno::in_group("Base")
    ]],

    uniform OmniImage::alpha_mode diffuse_reflection_weight_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Weight Image Alpha Mode"),
        anno::in_group("Base")
    ]],

    color diffuse_reflection_color = color(0.32911, 0.07638, 0.07638) [[
        anno::display_name("Color"),
        anno::in_group("Base")
    ]],

    uniform texture_2d diffuse_reflection_color_image = texture_2d() [[ 
        anno::display_name("Color Image"),
        anno::in_group("Base")
    ]],

    float diffuse_reflection_roughness = float(0.5) [[ 
        anno::display_name("Diffuse Roughness"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d diffuse_reflection_roughness_image = texture_2d() [[ 
        anno::display_name("Diffuse Roughness Image"),
        anno::in_group("Base")
    ]],

    uniform OmniImage::alpha_mode diffuse_reflection_roughness_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Diffuse Roughness Alpha Mode"),
        anno::in_group("Base")
    ]],

    //Metal
    //
    float metalness = float(0.0) [[ 
        anno::display_name("Metalness"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d metalness_image = texture_2d() [[ 
        anno::display_name("Metalness Image"),
        anno::in_group("Base")
    ]],

    uniform OmniImage::alpha_mode metalness_image_alpha_mode = OmniImage::alpha_red [[
        anno::display_name("Metalness Image Alpha Mode"),
        anno::in_group("Base")
    ]],

    //Specular reflection
    //
    float specular_reflection_weight = float(1) [[ 
        anno::display_name("Weight"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d specular_reflection_weight_image = texture_2d() [[ 
        anno::display_name("Weight Image"),
        anno::in_group("Specular")
    ]],

    uniform OmniImage::alpha_mode specular_reflection_weight_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Weight Image Alpha Mode"),
        anno::in_group("Specular")
    ]],

    color specular_reflection_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Specular")
    ]],

    uniform texture_2d specular_reflection_color_image = texture_2d() [[ 
        anno::display_name("Color Image"),
        anno::in_group("Specular")
    ]],

    float specular_reflection_roughness = float(0) [[
        anno::display_name("Roughness"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d specular_reflection_roughness_image = texture_2d() [[ 
        anno::display_name("Roughness Image"),
        anno::in_group("Specular")
    ]],

    uniform OmniImage::alpha_mode specular_reflection_roughness_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Roughness Image Alpha Mode"),
        anno::in_group("Specular")
    ]],

    uniform OmniShared::ior_presets specular_reflection_ior_preset = 
        OmniShared::ior_custom [[
        anno::display_name("IOR Preset"),
        anno::in_group("Specular")
    ]],

    uniform float specular_reflection_ior = float(1.5) [[ 
        anno::display_name("IOR"),    
        anno::in_group("Specular"),
        anno::soft_range(1.0f, 5.0f),
        anno::hard_range(1.0f, limits::FLOAT_MAX)
    ]],

    float specular_reflection_anisotropy = float(0.0) [[ 
        anno::display_name("Anisotropy"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d specular_reflection_anisotropy_image = texture_2d() [[ 
        anno::display_name("Anisotropy Image"),
        anno::in_group("Specular")
    ]],

    uniform OmniImage::alpha_mode specular_reflection_anisotropy_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Anisotropy Image Alpha Mode"),
        anno::in_group("Specular")
    ]],

    float specular_reflection_anisotropy_rotation = float(0.0) [[ 
        anno::display_name("Rotation (rad)"),
        anno::in_group("Specular"),
        anno::soft_range(0.0f, 1.0f)
    ]],

    uniform texture_2d specular_reflection_anisotropy_rotation_image = texture_2d() [[ 
        anno::display_name("Anisotropy Rotation Image"),
        anno::in_group("Specular")
    ]],

    uniform OmniImage::alpha_mode specular_reflection_anisotropy_rotation_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Anisotropy Rotation Alpha Mode"),
        anno::in_group("Specular")
    ]],

    //Subsurface
    //
    uniform float subsurface_weight = float(0.5) [[ 
        anno::display_name("Weight"),
        anno::in_group("Subsurface"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d subsurface_weight_image = texture_2d() [[ 
        anno::display_name("Weight Image"),
        anno::in_group("Subsurface")
    ]],

    uniform OmniImage::alpha_mode subsurface_weight_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Weight Image Alpha Mode"),
        anno::in_group("Subsurface")
    ]],

    uniform OmniShared::scattering_colors_presets subsurface_scattering_colors_preset = 
        OmniShared::scattering_colors_custom [[
        anno::display_name("Scattering Presets"),
        anno::in_group("Subsurface")
    ]],

    color subsurface_transmission_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Subsurface")
    ]],

    uniform texture_2d subsurface_transmission_color_image = texture_2d() [[ 
        anno::display_name("Color Image"),
        anno::in_group("Subsurface")
    ]],

    color subsurface_scattering_color = color(1.0) [[
        anno::display_name("Radius (mfp)"),
        anno::in_group("Subsurface")
    ]],

    uniform texture_2d subsurface_scattering_color_image = texture_2d() [[ 
        anno::display_name("Radius Image"),
        anno::in_group("Subsurface")
    ]],

    uniform float subsurface_scale = float(1.0) [[
        anno::display_name("Scale"),
        anno::in_group("Subsurface"),
        anno::hard_range(limits::FLOAT_MIN, limits::FLOAT_MAX)
    ]],

    uniform float subsurface_anisotropy = float(0.0) [[ 
        anno::display_name("Anisotropy"),
        anno::in_group("Subsurface"),
        anno::hard_range(-1.0f, 1.0f)
    ]],

    uniform OmniShared::subsurface_scattering_type rtx_mdl_subsurface_type__ = 
        OmniShared::random_walk [[
        anno::display_name("Subsurface Type"),
        anno::in_group("Subsurface"),
        anno::hidden()
    ]],

    //Coat
    //
    float coat_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d coat_weight_image = texture_2d() [[ 
        anno::display_name("Weight Image"),
        anno::in_group("Coat")
    ]],

    uniform OmniImage::alpha_mode coat_weight_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Weight Image Alpha Mode"),
        anno::in_group("Coat")
    ]],

    color coat_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Coat")
    ]],

    uniform texture_2d coat_color_image = texture_2d() [[ 
        anno::display_name("Color Image"),
        anno::in_group("Coat")
    ]],

    float coat_roughness = float(0.1) [[ 
        anno::display_name("Roughness"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d coat_roughness_image = texture_2d() [[ 
        anno::display_name("Roughness Image"),
        anno::in_group("Coat")
    ]],

    uniform OmniImage::alpha_mode coat_roughness_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Roughness Image Alpha Mode"),
        anno::in_group("Coat")
    ]],

    uniform OmniShared::ior_presets coat_ior_preset = 
        OmniShared::ior_custom [[
        anno::display_name("IOR Preset"),
        anno::in_group("Coat")
    ]],

    uniform float coat_ior = float(1.5) [[ 
        anno::display_name("IOR"),    
        anno::in_group("Coat"),
        anno::soft_range(1.0f, 5.0f),
        anno::hard_range(1.0f, limits::FLOAT_MAX)
    ]],

    float coat_anisotropy = float(0.0) [[ 
        anno::display_name("Anisotropy"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d coat_anisotropy_image = texture_2d() [[ 
        anno::display_name("Anisotropy Image"),
        anno::in_group("Coat")
    ]],

    uniform OmniImage::alpha_mode coat_anisotropy_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Anisotropy Image Alpha Mode"),
        anno::in_group("Coat")
    ]],

    float coat_anisotropy_rotation = float(0.0) [[ 
        anno::display_name("Rotation (rad)"),
        anno::in_group("Coat"),
        anno::soft_range(0.0f, 1.0f)
    ]],

    uniform texture_2d coat_anisotropy_rotation_image = texture_2d() [[ 
        anno::display_name("Anisotropy Rotation Image"),
        anno::in_group("Coat")
    ]],

    uniform OmniImage::alpha_mode coat_anisotropy_rotation_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Anisotropy Rotation Image Alpha Mode"),
        anno::in_group("Coat")
    ]],

    float coat_affect_color = float(0.0) [[
        anno::display_name("Affect Color"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d coat_affect_color_image = texture_2d() [[ 
        anno::display_name("Affect Color Image"),
        anno::in_group("Coat")
    ]],

    uniform OmniImage::alpha_mode coat_affect_color_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Affect Color Image Alpha Mode"),
        anno::in_group("Coat")
    ]],

    float coat_affect_roughness = float(0.0) [[
        anno::display_name("Affect Roughness"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d coat_affect_roughness_image = texture_2d() [[ 
        anno::display_name("Affect Roughness Image"),
        anno::in_group("Coat")
    ]],

    uniform OmniImage::alpha_mode coat_affect_roughness_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Affect Roughness Alpha Mode"),
        anno::in_group("Coat")
    ]],

    uniform float coat_normal_strength = float(1.0) [[ 
        anno::display_name("Normal Strength"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float3 coat_normal = state::normal()
    [[
        anno::display_name("Normal"),
        anno::in_group("Coat")
    ]],

    uniform texture_2d coat_normal_image = texture_2d() [[ 
        anno::display_name("Normal Map Image"),
        anno::in_group("Coat")
    ]],

    uniform bool coat_normal_image_flip_r_channel = false [[
        anno::display_name("Normal Map Flip R Channel"),
        anno::in_group("Coat")
    ]],

    uniform bool coat_normal_image_flip_g_channel = false [[
        anno::display_name("Normal Map Flip G Channel"),
        anno::in_group("Coat")
    ]],

    uniform bool coat_normal_image_flip_b_channel = false [[
        anno::display_name("Normal Map Flip B Channel"),
        anno::in_group("Coat")
    ]],

    //Emission
    //
    float emission_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Emission"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d emission_weight_image = texture_2d() [[ 
        anno::display_name("Weight Image"),
        anno::in_group("Emission")
    ]],

    uniform OmniImage::alpha_mode emission_weight_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Weight Image Alpha Mode"),
        anno::in_group("Emission")
    ]],

    uniform OmniShared::emission_mode emission_mode = OmniShared::emission_lx
    [[
        anno::display_name("Emission Mode"),
        anno::in_group("Emission")
    ]],

    float emission_intensity = float(1.0) [[
        anno::display_name("Intensity"),
        anno::in_group("Emission"),
        anno::soft_range(0.0f, 1000.0f)
    ]],

    uniform texture_2d emission_intensity_image = texture_2d() [[ 
        anno::display_name("Intensity Image"),
        anno::in_group("Emission")
    ]],

    uniform OmniImage::alpha_mode emission_intensity_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Intensity Image Alpha Mode"),
        anno::in_group("Emission")
    ]],

    color emission_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Emission")
    ]],

    uniform texture_2d emission_color_image = texture_2d() [[ 
        anno::display_name("Color Image"),
        anno::in_group("Emission")
    ]],

    uniform bool emission_use_temperature = false [[ 
        anno::display_name("Use Temperature"),
        anno::in_group("Emission")
    ]],

    float emission_temperature = float(6500.0) [[
        anno::display_name("Temperature"),
        anno::in_group("Emission"),
        anno::soft_range(0.0f, 10000.0f)
    ]],

    uniform texture_2d emission_temperature_image = texture_2d() [[ 
        anno::display_name("Temperature Image"),
        anno::in_group("Emission")
    ]],

    uniform OmniImage::alpha_mode emission_temperature_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Temperature Image Alpha Mode"),
        anno::in_group("Emission")
    ]],

    //Geometry
    //
    uniform bool thin_walled = false [[ 
        anno::display_name("Thin Walled"),
        anno::description("Thin surface with no interior."),
        anno::in_group("Geometry")
    ]],

	uniform bool enable_opacity = true
	[[
		anno::display_name("Enable Opacity"),
		anno::description("Enables the use of cutout opacity"),
		anno::in_group("Geometry")
	]],

    float geometry_opacity = float(1) [[
        anno::display_name("Opacity"),
        anno::in_group("Geometry"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform texture_2d geometry_opacity_image = texture_2d( "./OmniRL_EyeOcclusion_Opacity.png", ::tex::gamma_linear ) [[
        anno::display_name("Opacity Image"),
        anno::in_group("Geometry")
    ]],

    uniform OmniImage::alpha_mode geometry_opacity_image_alpha_mode = 
        OmniImage::alpha_red [[
        anno::display_name("Opacity Image Alpha Mode"),
        anno::in_group("Geometry")
    ]],

    uniform float geometry_normal_strength = float(1.0) [[ 
        anno::display_name("Geometry Normal Strength"),
        anno::in_group("Geometry"),
        anno::soft_range(0.0f, 1.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    float3 geometry_normal = state::normal() [[
        anno::display_name("Geometry Normal"),
        anno::in_group("Geometry")
    ]],

    uniform texture_2d geometry_normal_image = texture_2d() [[ 
        anno::display_name("Geometry Normal Map Image"),
        anno::in_group("Geometry")
    ]],

    uniform OmniShared::normal_mode geometry_normal_mode = 
        OmniShared::normal_tangent_space [[
            anno::display_name("Normal Map Mode"),
            anno::in_group("Geometry")
    ]],

    uniform bool geometry_normal_image_flip_r_channel = false [[
        anno::display_name("Normal Map Flip R Channel"),
        anno::in_group("Geometry")
    ]],

    uniform bool geometry_normal_image_flip_g_channel = false [[
        anno::display_name("Normal Map Flip G Channel"),
        anno::in_group("Geometry")
    ]],

    uniform bool geometry_normal_image_flip_b_channel = false [[
        anno::display_name("Normal Map Flip B Channel"),
        anno::in_group("Geometry")
    ]],

    uniform OmniImage::tangent_bitangent_mapping geometry_tangent_bitangent_mapping = 
        OmniImage::red_green [[
        anno::display_name("Tangent BitangentMapping"),
        anno::in_group("Geometry")
    ]],

    //Displacement
    float3 geometry_displacement = float3(0.0) [[
        anno::display_name("Displacement"),
        anno::in_group("Geometry")
    ]],

    uniform OmniShared::displacement_mode geometry_displacement_mode = 
        OmniShared::displacement_height [[
            anno::display_name("Displacement Mode"),
            anno::in_group("Geometry")
    ]],

    uniform texture_2d geometry_displacement_image = texture_2d() [[ 
        anno::display_name("Displacement Image"),
        anno::in_group("Geometry")
    ]],

    uniform OmniImage::alpha_mode geometry_displacement_image_alpha_mode = 
        OmniImage::alpha_red [[
            anno::display_name("Displacement Image Alpha Mode"),
            anno::in_group("Geometry")
    ]],

    float geometry_displacement_scale = float(1.0) [[
        anno::display_name("Displacement Scale"),
        anno::in_group("Geometry"),
        anno::soft_range(0.0f, 1.0f)
    ]],

    uniform texture_2d geometry_displacement_scale_image = texture_2d() [[ 
        anno::display_name("Displacement Scale Image"),
        anno::in_group("Geometry")
    ]],

    uniform OmniImage::alpha_mode geometry_displacement_scale_image_alpha_mode = 
        OmniImage::alpha_red [[
            anno::display_name("Displacement Scale Image Alpha Mode"),
            anno::in_group("Geometry")
    ]],

    float geometry_displacement_scalar_zero_value = float(0.0) [[
        anno::display_name("Displacement Scalar Zero Value"),
        anno::in_group("Geometry"),
        anno::soft_range(0.0f, 1.0f)
    ]],

    //UVW
    //
    uniform base::texture_coordinate_system uvw_texture_coordinate_system = 
        base::texture_coordinate_uvw [[
            anno::display_name("Texture Coordinate"),
            anno::in_group("UVW Coordinates")
    ]],

    uniform int uvw_uv_set = 0 [[
        anno::display_name("UV Set"),
        anno::in_group("UVW Coordinates"),
        anno::hard_range(0, 4)
    ]],

    uniform bool uvw_ignore_missing_textures = false [[
        anno::display_name("Ignore Missing Images"),
        anno::in_group("UVW Coordinates")
    ]],

    color uvw_missing_texture_color = color(0.0, 0.0, 0.0) [[
        anno::display_name("Missing Image Color"),
        anno::in_group("UVW Coordinates")
    ]],

    uniform bool uvw_use_uv_coords = false [[
        anno::display_name("Use UV Coords"),
        anno::in_group("UVW Coordinates")
    ]],

    float2 uvw_uv_coords = float2(0.0) [[
        anno::display_name("UV Coords"),
        anno::in_group("UVW Coordinates")
    ]],

    uniform float uvw_s_offset = 0.0f [[
        anno::display_name("Offset U"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(-100.0f, 100.0f)
    ]],

    uniform float uvw_t_offset = 0.0f [[
        anno::display_name("Offset V"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(-100.0f, 100.0f)
    ]],

    uniform OmniImage::wrap_mode uvw_s_wrap = OmniImage::wrap_periodic [[
        anno::display_name("Wrap U"),
        anno::in_group("UVW Coordinates")
    ]],
    
    uniform OmniImage::wrap_mode uvw_t_wrap = OmniImage::wrap_periodic [[
        anno::display_name("Wrap V"),
        anno::in_group("UVW Coordinates")
    ]],
    
    uniform float uvw_s_scale = 1.0f [[
        anno::display_name("Scale U"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(0.0f, 100.0f)
    ]],

    uniform float uvw_t_scale = 1.0f [[
        anno::display_name("Scale V"),
        anno::in_group("UVW Coordinates"),
        anno::soft_range(0.0f, 100.0f)
    ]],

    uniform bool uvw_s_flip = false [[
        anno::display_name("Flip U"),
        anno::in_group("UVW Coordinates")
    ]],

    uniform bool uvw_t_flip = false [[
        anno::display_name("Flip V"),
        anno::in_group("UVW Coordinates")
    ]],

    uniform bool uvw_swap_st = false [[
        anno::display_name("Swap UV"),
        anno::in_group("UVW Coordinates")
    ]],

    //Projection Coordinates (Local / World)
    uniform OmniImage::projection_mode uvw_projection_mode = OmniImage::projection_cubic [[
        anno::display_name("Projection Mode"),
        anno::in_group("UVW Coordinates")
    ]],

	uniform float3 uvw_projection_translate =  float3(0.0)
	[[
		anno::display_name("Translate"),
		anno::description("Translate the projected texture."),
		anno::in_group("UVW Coordinates")
	]],

	uniform float3 uvw_projection_rotate =  float3(0.0)
	[[
		anno::display_name("Rotate"),
		anno::description("Rotate the projected texture."),
		anno::in_group("UVW Coordinates")
	]],

	uniform float3 uvw_projection_scale =  float3(1.0)
	[[
		anno::display_name("Scale"),
		anno::description("Scale the projected texture."),
		anno::in_group("UVW Coordinates")
	]]
)
[[
    anno::display_name("OmniSurfaceLite"),
    anno::description("A base material for modeling a variety of surfaces."),
    anno::author("NVIDIA Corporation"),
    anno::key_words(string[]("generic", "surface")),
    anno::version(1, 0, 0, ""),
    anno::modified(2020, 11, 28, "")

]] = let {
     
    base::texture_coordinate_info texture_coordinate_info = OmniImage::compute_texture_coordinate_2(
        uvw_texture_coordinate_system,
        uvw_uv_set,
        uvw_s_offset,
        uvw_t_offset,
        uvw_s_scale,
        uvw_t_scale,
        uvw_s_flip,
        uvw_t_flip,
        uvw_swap_st,
        uvw_projection_mode,
        uvw_projection_translate,
        uvw_projection_rotate,
        uvw_projection_scale);

    material base = OmniSurfaceBase::OmniSurfaceBase(

    //Base
    //
    diffuse_reflection_weight: tex::texture_isvalid(diffuse_reflection_weight_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                diffuse_reflection_weight_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            diffuse_reflection_weight, //alpha_gain
            0.0f,       //alpha_offset
            diffuse_reflection_weight_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        diffuse_reflection_weight,

    diffuse_reflection_color: tex::texture_isvalid(diffuse_reflection_color_image) ? 
        OmniImage::texture_lookup_2(
            diffuse_reflection_color_image,
            uvw_ignore_missing_textures,
            uvw_missing_texture_color,
            uvw_use_uv_coords,
            uvw_uv_coords,
            uvw_s_wrap,
            uvw_t_wrap,
            texture_coordinate_info
            ).tint :
        diffuse_reflection_color,

    diffuse_reflection_roughness: tex::texture_isvalid(diffuse_reflection_roughness_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                diffuse_reflection_roughness_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            diffuse_reflection_roughness, //alpha_gain
            0.0f,       //alpha_offset
            diffuse_reflection_roughness_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        diffuse_reflection_roughness,

    //Metalness
    //
    metalness: tex::texture_isvalid(metalness_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                metalness_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            metalness, //alpha_gain
            0.0f,       //alpha_offset
            metalness_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        metalness,

    //Specular reflection
    //
    specular_reflection_weight: tex::texture_isvalid(specular_reflection_weight_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                specular_reflection_weight_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            specular_reflection_weight, //alpha_gain
            0.0f,       //alpha_offset
            specular_reflection_weight_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        specular_reflection_weight,

    specular_reflection_color: tex::texture_isvalid(specular_reflection_color_image) ?
        OmniImage::texture_lookup_2(
            specular_reflection_color_image,
            uvw_ignore_missing_textures,
            uvw_missing_texture_color,
            uvw_use_uv_coords,
            uvw_uv_coords,
            uvw_s_wrap,
            uvw_t_wrap,
            texture_coordinate_info
        ).tint :
        specular_reflection_color,

    specular_reflection_roughness: tex::texture_isvalid(specular_reflection_roughness_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                specular_reflection_roughness_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            specular_reflection_roughness, //alpha_gain
            0.0f,       //alpha_offset
            specular_reflection_roughness_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        specular_reflection_roughness,

    specular_reflection_ior_preset: specular_reflection_ior_preset,
    specular_reflection_ior: specular_reflection_ior,

    specular_reflection_anisotropy: tex::texture_isvalid(specular_reflection_anisotropy_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                specular_reflection_anisotropy_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            specular_reflection_anisotropy, //alpha_gain
            0.0f,       //alpha_offset
            specular_reflection_anisotropy_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        specular_reflection_anisotropy,

    specular_reflection_anisotropy_rotation: tex::texture_isvalid(
            specular_reflection_anisotropy_rotation_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                specular_reflection_anisotropy_rotation_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            specular_reflection_anisotropy_rotation, //alpha_gain
            0.0f,       //alpha_offset
            specular_reflection_anisotropy_rotation_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        specular_reflection_anisotropy_rotation,

    //Subsurface
    //
    subsurface_weight: tex::texture_isvalid(subsurface_weight_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                subsurface_weight_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            subsurface_weight, //alpha_gain
            0.0f,       //alpha_offset
            subsurface_weight_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        subsurface_weight,

    subsurface_scattering_colors_preset: subsurface_scattering_colors_preset,

    subsurface_transmission_color: tex::texture_isvalid(subsurface_transmission_color_image) ?
        OmniImage::texture_lookup_2(
            subsurface_transmission_color_image,
            uvw_ignore_missing_textures,
            uvw_missing_texture_color,
            uvw_use_uv_coords,
            uvw_uv_coords,
            uvw_s_wrap,
            uvw_t_wrap,
            texture_coordinate_info
        ).tint :
        subsurface_transmission_color,
    
    subsurface_scattering_color: tex::texture_isvalid(subsurface_scattering_color_image) ?
        OmniImage::texture_lookup_2(
            subsurface_scattering_color_image,
            uvw_ignore_missing_textures,
            uvw_missing_texture_color,
            uvw_use_uv_coords,
            uvw_uv_coords,
            uvw_s_wrap,
            uvw_t_wrap,
            texture_coordinate_info
        ).tint :
        subsurface_scattering_color,

    subsurface_scale: subsurface_scale,
    subsurface_anisotropy: subsurface_anisotropy,
    rtx_mdl_subsurface_type__: rtx_mdl_subsurface_type__,

    //Coat
    //
    coat_weight: tex::texture_isvalid(coat_weight_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                coat_weight_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            coat_weight, //alpha_gain
            0.0f,       //alpha_offset
            coat_weight_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        coat_weight,

    coat_color: tex::texture_isvalid(coat_color_image) ?
        OmniImage::texture_lookup_2(
            coat_color_image,
            uvw_ignore_missing_textures,
            uvw_missing_texture_color,
            uvw_use_uv_coords,
            uvw_uv_coords,
            uvw_s_wrap,
            uvw_t_wrap,
            texture_coordinate_info
        ).tint :
        coat_color,

    coat_roughness: tex::texture_isvalid(coat_roughness_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                coat_roughness_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            coat_roughness, //alpha_gain
            0.0f,       //alpha_offset
            coat_roughness_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        coat_roughness,

    coat_ior_preset: coat_ior_preset,
    coat_ior: coat_ior,

    coat_anisotropy: tex::texture_isvalid(coat_anisotropy_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                coat_anisotropy_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            coat_anisotropy, //alpha_gain
            0.0f,       //alpha_offset
            coat_anisotropy_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        coat_anisotropy,

    coat_anisotropy_rotation: tex::texture_isvalid(coat_anisotropy_rotation_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                coat_anisotropy_rotation_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            coat_anisotropy_rotation, //alpha_gain
            0.0f,       //alpha_offset
            coat_anisotropy_rotation_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        coat_anisotropy_rotation,

    coat_affect_color: tex::texture_isvalid(coat_affect_color_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                coat_affect_color_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            coat_affect_color, //alpha_gain
            0.0f,       //alpha_offset
            coat_affect_color_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        coat_affect_color,

    coat_affect_roughness: tex::texture_isvalid(coat_affect_roughness_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                coat_affect_roughness_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            coat_affect_roughness, //alpha_gain
            0.0f,       //alpha_offset
            coat_affect_roughness_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        coat_affect_roughness,

    coat_normal: tex::texture_isvalid(coat_normal_image) ?
        OmniImage::normal_mapping(
            OmniImage::normal_lookup_2(
                coat_normal_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                uvw_s_flip,
                uvw_t_flip,
                coat_normal_strength,
                coat_normal_image_flip_r_channel,
                coat_normal_image_flip_g_channel,
                coat_normal_image_flip_b_channel
            ).normal,
            geometry_tangent_bitangent_mapping,
            coat_normal
        ):
        coat_normal,

    //Emission
    //
    emission_weight: tex::texture_isvalid(emission_weight_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                emission_weight_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            emission_weight, //alpha_gain
            0.0f,       //alpha_offset
            emission_weight_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        emission_weight,

    emission_mode: emission_mode,

    emission_intensity: tex::texture_isvalid(emission_intensity_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                emission_intensity_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            emission_intensity, //alpha_gain
            0.0f,       //alpha_offset
            emission_intensity_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        emission_intensity,

    emission_color: tex::texture_isvalid(emission_color_image) ?
        OmniImage::texture_lookup_2(
            emission_color_image,
            uvw_ignore_missing_textures,
            uvw_missing_texture_color,
            uvw_use_uv_coords,
            uvw_uv_coords,
            uvw_s_wrap,
            uvw_t_wrap,
            texture_coordinate_info
        ).tint :
       emission_color,

    emission_use_temperature: emission_use_temperature,

    emission_temperature: tex::texture_isvalid(emission_temperature_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                emission_temperature_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            emission_temperature, //alpha_gain
            0.0f,       //alpha_offset
            emission_temperature_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        emission_temperature,

    //Geometry
    //
    thin_walled: thin_walled,

    enable_opacity: enable_opacity,
    
    geometry_opacity: tex::texture_isvalid(geometry_opacity_image) ?
        OmniImage::texture_adjustment(
            OmniImage::texture_lookup_2(
                geometry_opacity_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                texture_coordinate_info
            ),
            0.0f,       //exposure
            color(0.5), //default_color
            color(1.0), //color_gain
            color(0.0), //color_offset
            geometry_opacity, //alpha_gain
            0.0f,       //alpha_offset
            geometry_opacity_image_alpha_mode,
            false,      //invert
            0.0f        //blend_factor
        ).mono :
        geometry_opacity,

    geometry_normal: tex::texture_isvalid(geometry_normal_image) ?
        OmniImage::normal_mapping(
            OmniImage::normal_lookup_2(
                geometry_normal_image,
                uvw_ignore_missing_textures,
                uvw_missing_texture_color,
                uvw_use_uv_coords,
                uvw_uv_coords,
                uvw_s_wrap,
                uvw_t_wrap,
                uvw_s_flip,
                uvw_t_flip,
                geometry_normal_strength,
                geometry_normal_image_flip_r_channel,
                geometry_normal_image_flip_g_channel,
                geometry_normal_image_flip_b_channel
            ).normal,
            geometry_tangent_bitangent_mapping,
            geometry_normal
        ):
        geometry_normal,
        
    geometry_displacement: tex::texture_isvalid(geometry_displacement_image) ?
        OmniShared::displacement_adjustment(
            (geometry_displacement_mode == OmniShared::displacement_height) ?
                float3(OmniImage::texture_adjustment(
                    OmniImage::texture_lookup_2(
                        geometry_displacement_image,
                        uvw_ignore_missing_textures,
                        uvw_missing_texture_color,
                        uvw_use_uv_coords,
                        uvw_uv_coords,
                        uvw_s_wrap,
                        uvw_t_wrap,
                        texture_coordinate_info
                    ),
                    0.0f,       //exposure
                    color(0.5), //default_color
                    color(1.0), //color_gain
                    color(0.0), //color_offset
                    1.0f,       //alpha_gain
                    -1.0f * geometry_displacement_scalar_zero_value, //alpha_offset
                    geometry_displacement_image_alpha_mode,
                    false,      //invert
                    0.0f        //blend_factor
                ).mono) :

                float3(OmniImage::texture_lookup_2(
                        geometry_displacement_image,
                        uvw_ignore_missing_textures,
                        uvw_missing_texture_color,
                        uvw_use_uv_coords,
                        uvw_uv_coords,
                        uvw_s_wrap,
                        uvw_t_wrap,
                        texture_coordinate_info
                    ).tint
                ),

            geometry_displacement_mode,

            tex::texture_isvalid(geometry_displacement_scale_image) ?
                OmniImage::texture_adjustment(
                    OmniImage::texture_lookup_2(
                        geometry_displacement_scale_image,
                        uvw_ignore_missing_textures,
                        uvw_missing_texture_color,
                        uvw_use_uv_coords,
                        uvw_uv_coords,
                        uvw_s_wrap,
                        uvw_t_wrap,
                        texture_coordinate_info
                    ),
                    0.0f,       //exposure
                    color(0.5), //default_color
                    color(1.0), //color_gain
                    color(0.0), //color_offset
                    geometry_displacement_scale, //alpha_gain
                    0.0f,       //alpha_offset
                    geometry_displacement_scale_image_alpha_mode,
                    false,      //invert
                    0.0f        //blend_factor
                ).mono :
                geometry_displacement_scale
        ):
        geometry_displacement
    );

} in material(
    thin_walled: base.thin_walled,
    ior: base.ior,
    surface: base.surface,
    backface: base.backface,
    volume: base.volume,
    geometry: base.geometry
);